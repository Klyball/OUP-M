	*=$DBC0 

START=$00                
CREG=$08                
DEREG=$09                
HLREG=$0B                
HLREG1=$0D                
FLAG=$0F      ;BIT3:'1' FOR BUILD UP CHECK AREA     
          ;BIT4:'1' FOR R/W SECTOR     
          ;BIT5:'1' FOR ADD MAP BIT    
          ;BIT6:'1' FOR WRITE      
          ;BIT7:'1' FOR DIR ENTRY FINISH    
DIRBFA=$12      ;DIR BUFFER         
MAPBFA=$14      ;MAP AREA         
CHKBFA=$16      ;CHECK AREA         
RTNFLG=$18      ;THREE RETURN FLAGS        
DRERNB=$1C      ;DIR ENTRY#         
DREROF=$1D      ;DIR ENTRY OFFSET        
TEMP=$1F                
BLKNUB=$21      ;BLOCK NUMBER         
TRKNUB=$22      ;TRACK NUMBER         
TEMP1=$23                
PRVDSK=$24      ;PREVIOUS DISK#         
CRTDRN=$25      ;RESERVED FOR DR OF FCB      
CMERCT=$27      ;NUMBER OF MATCHING FCB WITH DIR     
DERDSK=$29      ;DESIRED DISK#         
RTNFG1=$2A      ;AXULIRARY RETURN FLAG        
FLAG2=$2C                
CRRCNB=$2D      ;CR          
TLRCNB=$2E      ;RC          
EXNTNB=$2F      ;EX          
SECNUB=$30      ;SECTOR# WITHIN A TRACK       
TEMP2=$37                
BKRBLK=$31      ;BACK BLOCK#         
ADVBLK=$33      ;ADVANCED BLOCK#         
BKOSFG=$35      ;BLOCK OFFSET FLAG        
BLKOFS=$36      ;BLOCK OFFSET         
IOBFFG=$39      ;'FLUSH' FLAG         
CRTDSK=$3A      ;CURRENT DISK NO.        
CBADRV=$55      ;RESERVED FOR SERCH NEXT       
FLAG1=$58                
SYMRST=$D9A6     ;BDO1           
CSLIN=$D9C0                
CSLOUT=$DA5C                
LITOTT=$DA71                
DRCSIO=$DA74                
OUTBUF=$DA8B                
RDCSBF=$DACD                
GTIOBY=$DBB2                
STIOBY=$DBB7                
GTCLST=$DBBA                
PAMTAB=$E41F     ;BIOS           
LITOUT=$E5A9                
HOMEHD=$E5F5                
DKSEL1=$E643                
SETTR1=$E665                
SETSC1=$E668                
SETBL1=$E66B                
STDMA1=$E66E                
WRTIRK=$E822                
RWDBS1=$E887                
ERROR=$E928                
SIOBDK=$E90A                
DFBUFA=$E965                
DIRBUF=$EB65                
MAPAR0=$ED65                
MAPAR1=$EDA5                
CHKAR0=$EDE5                
CHKAR1=$EDF3                
FLCTBK=$EE01                
IOBUF=$B000                
USERCD 	.BYTE $01   ;USER CODE          
WPTVCT 	.BYTE $00   ;R/O VECTOR          
LOGVTR 	.BYTE $00   ;LOGIN VECTOR          
 ;BRANCH TABLE                
BRHTAB .WORD SYMRST,CSLIN,CSLOUT,LITOTT,DRCSIO               
   .WORD OUTBUF,RDCSBF,GTIOBY,STIOBY,GTCLST              
   .WORD RSDKSM,GTLGVT,GTCRDK,GTMPLT,SETWPT              
   .WORD GTROVT,GTDKPA,SGTUCD,SETDMA,SELDSK              
   .WORD MAKFIL,DELFIL,OPNFIL,CLSFIL,RDRCSQ              
   .WORD WTRCSQ,RDRCRM,WTRCRM,SHFIST,SHNEXT              
   .WORD RENAME,CHATRB,CPFISZ,STRDRC,SIODSK              
 ;                 
 ;*******************************************************                 
 ;*                 
 ;* FUNCTION 10 : RESET DISK SYSTEM           
 ;*                 
 ;*******************************************************                 
 ;*                 
 ;* ENTRY PARAMETERS :              
 ;*  REGISTERX : $0A             
 ;*                 
 ;*******************************************************                 
 ;                 
RSDKSM=*               
 ;                 
  LDA #$00   ;INITIALIZE WRITING PROTECT VECTOR         
  STA LOGVTR   ;& DISK LOG VECTOR         
  STA WPTVCT               
  STA DERDSK   ;SELECT DISK A          
  JSR S_LDSK               
  LDA #<DFBUFA  ;SELECT DEFAULT BUF FOR DMA        
  LDX #DFBUFA/256               
  JMP STDMA1               
 ;                 
 ;                 
 ;                 
 ;*******************************************************                 
 ;*                 
 ;* FUNCTION 11 : GET LOGIN VECTOR           
 ;*                 
 ;*******************************************************                 
 ;*                 
 ;*  ENTRY PARAMETERS :             
 ;*   REGISTER X : $0B           
 ;*                 
 ;*  RETURNED VALUE :             
 ;*   REGISTER A : LOGIN VECTOR          
 ;*                 
 ;******************************************************                 
 ;                 
GTLGVT=*                
 ;                 
  LDA LOGVTR               
  JMP STRTFG               
 ;                 
 ;*******************************************************                 
 ;*                 
 ;* FUNCTION 12 : GET CURRENT DISK NUMBER *         
 ;*                 
 ;*******************************************************                 
 ;*                 
 ;* ENTRY PARAMETERS :              
 ;*  REGISTER X : $0C            
 ;*                 
 ;* RETURNED VALUE :              
 ;*  REGISTER A : CURRENT DISK NUMBER          
 ;*                 
 ;*******************************************************                 
 ;                 
GTCRDK=*                
  LDA CRTDSK               
  JMP STRTFG               
 ;                 
 ;********************************************************                 
 ;*                 
 ;*  FUNCTION 13 : GET MAP ADDRESS OF CURRENT DISK *      
 ;*                 
 ;********************************************************                 
 ;*                 
 ;* ENTRY PARAMETERS :              
 ;*  REGISTER X : $0D            
 ;*                 
 ;* RETURNED VALUE :              
 ;*  REGISTER Y,A : MAP ADDRESS OF CURRENT DISK *       
 ;*                 
 ;********************************************************                 
 ;                 
GTMPLT=*                
 ;                 
  LDA MAPBFA               
  STA RTNFLG+1               
  LDA MAPBFA+1               
  STA RTNFLG+2               
  RTS                
 ;                 
 ;********************************************************                 
 ;*                 
 ;*  FUNCTION 14 : SET WRITING PROTECT VECTOR         
 ;*                 
 ;********************************************************                 
 ;*                 
 ;*  ENTRY PARAMETERS :             
 ;*  REGISTER X : $0E            
 ;*                 
 ;****************************************************                 
 ;                 
SETWPT=*                
 ;                 
  LDA CRTDSK    ;GET BIT PATTERN FOR CURRENT       
  JSR BNYBIT    ;DISK           
  ORA WPTVCT               
  STA WPTVCT    ;SET R/O FOR CURRENT DISK       
  RTS                
 ;                 
 ;********************************************************                 
 ;*                 
 ;*  FUNCTION 15 : GET READ ONLY VECTOR         
 ;*                 
 ;******************************************************                 
 ;*                 
 ;*  ENTRY PARAMETERS :             
 ;*   REGISTER X : $0F           
 ;*                 
 ;*  RETURNED VALUE :             
 ;*   REGISTER A : READY ONLY VECTOR         
 ;*                 
 ;********************************************************                 
 ;                 
GTROVT=*                
 ;                 
  LDA WPTVCT               
  JMP STRTFG               
 ;                 
 ;                 
 ;                 
 ;                 
 ;                 
 ;                 
 ;                 
 ;                 
 ;                 
 ;                 
 ;                 
 ;                 
 ;*****************************************************                 
 ;*                 
 ;* FUNCTION 1 6 : GET PARAMETER TABLE ADDRESS OF        
 ;*      CURRENT DISK          
 ;*                 
 ;*****************************************************                 
 ;*                 
 ;*  ENTRY PARAMETERS :             
 ;*  REGISTER X : 10            
 ;*                 
 ;* RETURNED VALUE :              
 ;*  REGISTER Y,A : PARAMETER TABLE ADDRESS          
 ;*                 
 ;********************************************************                 
 ;                 
GTDKPA=*                
 ;                 
  LDA CRTDSK               
  LDX #$03               
  JSR ASLDSR               
  LDX #<PAMTAB       ;GET CORRES. ADDR.      
  STX HLREG               
  LDX #PAMTAB/256               
  STX HLREG+1               
  LDX #$00               
  STX TEMP               
  JSR ADCOFS               
  LDA HLREG       ;RETURN THE ADDR.      
  STA RTNFLG+1               
  LDA HLREG+1               
  STA RTNFLG+2               
  RTS                
 ;                 
 ;*********************************************************                 
 ;*                 
 ;*  FUNCTION 17 : SET/GET USERCODE           
 ;*                 
 ;*********************************************************                 
 ;*                 
 ;* ENTRY PARAMETERS :              
 ;*  REGISTER X : 11            
 ;*  REGISTER A : $FF (GET) OR USERCODE (SET)        
 ;*                 
 ;* RETURNED VALUE :              
 ;*  REGISTER A :CURRENT CODE OR (NO VALUE)         
 ;*                 
 ;*********************************************************                 
 ;                 
SGTUCD=*                
  CMP #$FF     ;CHECK WETHER SET OR GET      
  BNE S_TUCD               
  LDA USERCD     ;GET IT         
  JMP STRTFG               
S_TUCD=*                
  AND #$1F               
  STA USERCD      ;GET IT        
  RTS                
 ;                 
 ;*********************************************************                 
 ;*                 
 ;* FUNCTION 18 : SET DMA ADDRESS           
 ;*                 
 ;*****************************************************                 
 ;*                 
 ;*  ENTRY PARAMETERS :             
 ;*   REGISTER X : 12           
 ;*   REGISTER Y,A : DMA ADDRESS          
 ;                 
 ;*********************************************************                 
 ;                 
SETDMA=*                
 ;                 
  LDA DEREG               
  LDX DEREG+1               
  JMP STDMA1               
 ;                 
ASLDSR=*     ;VALUE*(2**(X))           
 ;        ;WHERE VALUE IS IN A & TEMP   
 ;                 
  ASL                
  ROL TEMP               
  DEX                
  BNE ASLDSR               
  RTS                
 ;                 
ADCOFS=*     ;ADD OFFSET TO THE ADDR.       
 ;                 
  CLC                
  ADC HLREG               
  STA HLREG               
  LDA TEMP               
  ADC HLREG+1               
  STA HLREG+1               
  RTS                
 ;                 
GETENT=*     ;GET DESIRED DIR ENTRY ADDR.       
 ;                 
  LDA DIRBFA               
  STA HLREG               
  LDA DIRBFA+1               
  STA HLREG+1               
  LDA DREROF+1               
  STA TEMP               
  LDA DREROF               
  JMP ADCOFS               
 ;                 
BNYBIT=*     ;ENTRY:A BINARY          
         ;EXIT:A BIT PATTERN       
 ;                 
  TAX                
  LDA #$01               
B_YBIT=*                
  DEX                
  BMI BN_BIT               
  ASL                
  JMP B_YBIT               
BN_BIT=*                
  RTS                
 ;                 
  ;FOR THE INPUT PHYSICAL BLOCK NO.IN A &TEMP         
  ;CACULATE THE CORRS. BYTE OFFSET FROM BIT MAP         
  ;AND STORE IT TO Y,THE BIT PATTERN WITHIN THE        
  ;BYTE ANDSTORE IT TO A            
 ;                 
GTMAPB=*                
 ;                 
  PHA        ;LOW BYTE R-SHIFT 3 TIMES    
  LSR                
  LSR                
  LSR                
  LDX #$05               
G_MAPB=*                
  ASL TEMP      ;HIGH BYTE L-SHIFT 5 TIMES     
  DEX                
  BNE G_MAPB               
  ORA TEMP      ;THE RESULT: PHY. BLOCK NO./8     
  TAY                
  PLA                
  AND #$07      ;GET THE CORRES. BIT PATTERN     
  STA TEMP+1               
  LDA #$07               
  SEC                
  SBC TEMP+1               
  JMP BNYBIT               
 ;                 
GTBKNB=*      ;GET PHYSICAL BLOCK NO.       
          ;AND STORE IN A & TEMP   
 ;                 
  LDA #$00               
  STA TEMP               
  LDA (HLREG1),Y     ;GET LOGICAL BLOCK NO.       
  LDX #$01      ;AND *2        
  JSR ASLDSR               
  TAX                
  TYA                
  LSR        ;ODD OR EVEN?      
  BCS G_BKNB      ;ODD, -1        
  JSR G_BKNB      ;EVEN, -2        
G_BKNB=*                
  CPX #$00               
  BNE GT_KNB               
  DEC TEMP               
GT_KNB=*                
  DEX                
  TXA                
  RTS                
 ;                 
MDFMPB=*      ;BUILD OR MODIFY BIT MAP      
 ;                 
  JSR GTBKNB      ;GET PHSICAL BLOCK NO.      
  JSR GTMAPB               
  PHA                
  LDA #$20      ;ADD OR DELETE?       
  BIT FLAG               
  BEQ M_FMPB               
  PLA                
  ORA (MAPBFA),Y     ;SET CORRES. BIT        
  STA (MAPBFA),Y               
  RTS                
M_FMPB=*                
  PLA                
  EOR #$FF               
  AND (MAPBFA),Y     ;RESET CORRES. BIT        
  STA (MAPBFA),Y               
  RTS                
 ;                 
MDFMAP=*      ;BUILD OR MODIFY BIT MAP FOR     
          ;WHOLE ENTRY'       
 ;                 
  LDA HLREG      ;DIR ADDR. STORE TO HLREG1     
  STA HLREG1               
  LDA HLREG+1               
  STA HLREG1+1               
  LDY #$0F               
MD_MAP=*                
  INY                
  CPY #$20      ;16 BYTES DONE?       
  BNE M_FMAP      ;NO, KEEP DOING       
  RTS                
M_FMAP=*                
  LDA (HLREG1),Y     ;GET LOGICAL BLOCK NO.       
  BEQ MD_MAP      ;IF 0, SKIP IT      
  STY TEMP1               
  JSR MDFMPB      ;IF NO 0, MODIFY CORRE. BIT MAP   
  LDY TEMP1               
  JMP MD_MAP               
 ;                 
ADDDIR=*      ;GET THE CHECKSUM OF THE DIR     
          ;BLOCK AND STORE IT TO X & TEMP 
          ;EXIT:X,TEMP SUM OF WHOLE DIR    
 ;                 
  LDX #$02               
  LDY #$00               
  LDA #$00               
A_DDIR=*                
  CLC        ;ADD UP ALL BYTES IN THE BLOCK  
                  
  ADC (HLREG),Y               
  BCC AD_DIR               
  INC TEMP               
AD_DIR=*                
  INY                
  BNE A_DDIR               
  INC HLREG+1               
  DEX                
  BNE A_DDIR      ;TWO PAGE DONE?       
  TAX                
  RTS                
 ;                 
DIRCHK=*      ;BUILD OR CHECK CHECKSUM       
 ;                 
  LDA BLKNUB      ;GET OFFSET FROM CHECKSUM AREA     
  LDX #$01      ;FOR DESIRED DIR BLOCK      
  JSR ASLDSR               
  PHA                
  LDA #$00      ;SET DIR BUFFER ADDR.      
  STA TEMP               
  LDA DIRBFA               
  STA HLREG               
  LDA DIRBFA+1               
  STA HLREG+1               
  JSR ADDDIR      ;GET CKECKSUM FOR THIS DIR BLOCK    
  PLA                
  TAY                
  TXA                
  LDA #$08               
  BIT FLAG      ;BUILD OR CHECK?       
  BNE D_RCHK               
  TXA        ;CHECKING CHECKSUM       
  CMP (CHKBFA),Y               
  BNE DI_CHK               
  INY                
  LDA TEMP               
  CMP (CHKBFA),Y               
  BNE DI_CHK               
  RTS                
DI_CHK=*                
  JSR SETWPT      ;IF NOT MATCH, SET CORRES. DISK    
  LDA #$06      ;TO R/O AND DISPALY ERR     
  JMP ERROR               
D_RCHK=*                
  TXA        ;BUILDING CHECKSUM       
  STA (CHKBFA),Y               
  INY                
  LDA TEMP               
  STA (CHKBFA),Y               
  RTS                
  ;                
DSKPRM=*      ;GET CORRES. DISK PARAMS.       
          ;& STORE THEM TO DIRBFA,MAPBFA    
          ;AND CHKBFA       
                  
                  
                  
 ;                 
  LDA CRTDSK               
  JSR DKSEL1               
  LDY #$05               
D_KPRM=*                
  LDA (HLREG),Y               
  STA DIRBFA,Y               
  DEY                
  BPL D_KPRM 
  RTS              
 ;                 
RWDRBK=*      ;READ OR WRITE DIR BLOCK      
 ;                 
  JSR R_DRBK      ;SET DIR BUFFER FOR DMA     
  JSR RWDBS1      ;R/W A DIR BLOCK      
  LDA #<DFBUFA      ;RECOVE DMA TO DEFAULT BUFFER     
  LDX #DFBUFA/256               
  JMP STDMA1               
R_DRBK=*                
  LDA DIRBFA               
  LDX DIRBFA+1               
  JMP STDMA1               
 ;                 
RDDIRB=*      ;READ DIR BLOCKS TO DIR BUFFER     
          ;AND BUILD UP CHECKSUM     
 ;                 
  INC DRERNB      ;SET CURRENT ENTRY NO,      
  LDA DRERNB               
  CMP #$70      ;112 ENTRIES DONE?       
  BCC R_DIRB               
  LDA #$80      ;IF DONE, SET FLAG DONE     
  ORA FLAG               
  STA FLAG               
  RTS                
R_DIRB=*                
  AND #$0F      ;GET CORRES, ENTRY OFFSET      
  LDX #$05      ;AWAY FROM THE DIR BUFFER     
  LDY #$00               
  STY TEMP               
  JSR ASLDSR               
  STA DREROF      ;STORE IT        
  LDA TEMP               
  STA DREROF+1               
  ORA DREROF      ;FIRST ENTRY?        
  BEQ BDD_RB               
  BIT FLAG1               
  BMI BDD_RB               
  RTS        ;IF NO, RETURN      
BDD_RB=*                
  STA FLAG1               
  LDA DRERNB               
  AND #$F0               
  LSR                
  LSR                
                  
  LSR                
  LSR                
  STA BLKNUB      ;SET BLOCK NO.       
  JSR SETBL1               
  LDA #$03               
  STA TRKNUB      ;SET DIR TRACK NO.      
  JSR SETTR1               
  JSR RWDRBK      ;READ THIS DIR BLOCK      
  JMP DIRCHK      ;BUILD UP CHECKSUM       
 ;                 
BUDMAP=*      ;BUILD UP BIT MAP FOR      
          ;CURRENT DISK'       
 ;                 
  LDA #$00      ;INIT. BIT MAP TO 0     
  LDY #$3F              
B_DMAP=*                
  STA (MAPBFA),Y               
  DEY                
  BPL B_DMAP               
  LDA #$FF      ;INIT. ENTRY COUNTER      
  STA DRERNB               
  LDA #$28      ;SET FLAG INDICATING READ BLOCK    
  STA FLAG      ;, BUILD BIT AMAP & CHECKSUM    
BUD_AP=*                
  JSR RDDIRB      ;READ A DIR BLOCK      
  BIT FLAG      ;112 ENTRIES DONE?       
  BPL BU_MAP               
  RTS        ;YES, RETURN       
BU_MAP=*                
  JSR GETENT      ;GET CORRES. ENTRY ADDR.      
  LDA #$E5               
  LDY #$00               
  CMP (HLREG),Y               
  BEQ BUD_AP      ;SKIP THE EMPTY ONE      
  JSR MDFMAP      ;BUILD UP THE BIT MAP FOR THE ENTRY  
  JMP BUD_AP               
 ;                 
LGNMAP=*      ;LOG IN CURRENT DISK       
 ;                 
  JSR DSKPRM      ;GET DISK PARA. FOR CURRENT DISK    
  LDA CRTDSK               
  JSR BNYBIT      ;GET BIT PATTERN       
  BIT LOGVTR               
  BEQ L_GMAP               
  RTS                
L_GMAP=*                
  ORA LOGVTR               
  STA LOGVTR      ;LOG IN CURRENT DISK      
  JMP BUDMAP      ;BUILD UP BIT MAP & CHECKSUM    
RESV11*=*+3                
 ;                 
 ;                 
 ;                 
 ;                 
 ;                 
 ;                 
 ;*********************************************************                 
 ;*                 
 ;* FUNCTION 19 : SELECT DISK            
 ;*                 
 ;**********************************************************                 
 ;*                 
 ;* ENTRY PARAMETERS :              
 ;*  REGISTER X : 13            
 ;*  REGISTER A : SELECT DISK           
 ;*                 
 ;**********************************************************                 
 ;                 
SELDSK=*                
 ;                 
  STA DERDSK      ;CHECK LEGALITY        
  CMP #$02               
  BCC SE_DSK               
  LDA #$02               
  JMP ERROR               
SE_DSK=*                
  CMP CRTDSK      ;=CURRENT DISK?        
  BNE S_LDSK      ;IF NOT, SELECT IT AS CURRENT    
  RTS                
S_LDSK=*                
  JSR SIOBDK      ;SEND LAST TRACK IN BUF TO DISK   
  LDA DERDSK               
  STA CRTDSK               
  JMP LGNMAP      ;BUILD UP BIT MAP & CHECKSUM FOR IT  
 ;                 
MDFYS2=*      ;SET FCB.S2 TO INDICATE FCB HAS BEEN    
          ;ACTIVED        
 ;                 
  LDY #$0E               
  LDA #$80               
  STA (DEREG),Y               
  RTS                
 ;                 
FCBINZ=*      ;SELECT DISK ACCORDING TO FCB      
          ;PUT USER'S CODE TO FCB. DR   
 ;                 
  LDA #$FF      ;INIT. RETURN FLAG       
  STA RTNFLG               
  LDY #$00               
  LDA (DEREG),Y     ;CURRENT DISK IS DESIRED?       
  AND #$1F               
  BEQ F_BINZ               
  STA DERDSK      ;IF NOT, STORE IT AS DESIRED    
  DEC DERDSK               
  LDA CRTDSK      ;KEEP CURRENT DISK       
  STA PRVDSK               
  LDA (DEREG),Y               
  STA CRTDRN               
  AND #$E0               
  STA (DEREG),Y               
  LDA DERDSK      ;SELECT DESIRED DISK       
  JSR SELDSK               
F_BINZ=*                
  LDA USERCD      ;STORE USERCODE TO FCB.DR      
  LDY #$00               
  ORA (DEREG),Y             
  STA (DEREG),Y               
  RTS                
 ;                 
TETWPT=*     ;TEST FOR DISK WRITING PROTECT       
 ;                 
  JSR T_TWPT               
  BNE TE_WPT               
  RTS                
TE_WPT=*                
  LDA #$04               
  JMP ERROR               
T_TWPT=*                
  LDA CRTDSK               
  JSR BNYBIT               
  BIT WPTVCT               
  RTS                
 ;                 
FBDRMH=*      ;MATCHING FCB WITH DIR       
 ;                 
  LDA #$FF      ;INIT. ENTRY COUNTER       
  STA RTNFG1               
FBD___=*                
  STA DRERNB               
  STX CMERCT      ;KEEP MATCH NUMBERS       
FBDR__=*                
  LDA #$00      ;SET CHECKING,DIR NOT FINISH      
  STA FLAG      ;AND READING BLOCK FLAG      
FB_RMH=*                
  JSR RDDIRB      ;READA DIR BLOCK       
  BIT FLAG      ;112 ENTRIES DONE?       
  BMI FBD__H                
  JSR GETENT      ;IF NOT, GET DESIRED ENTRY ADDR.    
  LDX CMERCT               
  DEX        ;TEST FOR MAKING FILE     
  BEQ FBD_MH               
  INX                
  LDY #$FF               
F_DRMH=*                
  INY                
  DEX                
  BMI FBDR_H      ;YES, FILE NAMEFOUND        
  CPY #$0D               
  BEQ F_DRMH               
  LDA (DEREG),Y     ;GET CURRENT CHAR AND MATCH IT     
  JMP F__RMH               
FBD_MH=*                
  LDA #$E5      ;IF MAKE FILE, MATCH $E5     
  LDY #$00      ;TO FIND AN EMPTY ENTRY     
F__RMH=*                
  CMP #$3F      ;'?'?         
  BEQ F_DRMH               
  SEC                
  SBC (HLREG),Y               
  AND #$7F               
  BEQ F_DRMH      ;NEXT BYTE EXPECTED       
  BNE FB_RMH      ;NEXT ENTRY EXPECTED       
FBDR_H=*                
  LDA DRERNB      ;IF MATCH FOUND, SET MATCKED     
  STA RTNFLG+1     ;ENTRYNO.          
  STA RTNFG1               
  RTS                
FBD__H=*                
  LDA #$FF      ;IF NOT, SET $FF     
  STA RTNFLG+1               
  RTS                
 ;                 
PTFBDK=*      ;PUT FCB TO DISK       
  JSR GETENT      ;GET DESIRED ENTRY ADDR,.      
  LDY #$00               
P_FBDK=*                
  LDA (DEREG),Y     ;COPY DESIRED CHARS. FROM FCB      
  STA (HLREG),Y     ;TO DIR ENTRY        
  INY                
  DEX                
  BNE P_FBDK               
PT_BDK=*                
  LDA #$48               
  ORA FLAG      ;SET WRITING BLOCK FLAG      
  STA FLAG               
  JSR DIRCHK               
  LDA BLKNUB      ;SET DIR BLOCK       
  JSR SETBL1               
  LDA #$03      ;SET DIR TRACK NO.      
  JSR SETTR1               
  JMP RWDRBK      ;WRITE DIR BLOCK TO DISK     
 ;                 
MKFILE=*                
 ;                 
  JSR TETWPT      ;DISK WRITE PROTECTED       
  LDA #$10      ;ORIGINAL MAKING?        
  BIT FLAG2               
  BEQ M_FILE               
  LDX #$0C               
  JSR FBDRMH      ;YES, CHECK FOR DUPLICATION      
  BIT FLAG               
  BMI M_FILE               
  LDA #$05      ;IF DUPLICATED, ERR       
  JMP ERROR               
M_FILE=*                
  LDX #$01               
  JSR FBDRMH      ;GO TO FIND AN EMPTY DIR    
  BIT FLAG      ;MATCHED?         
  BPL MK_ILE               
  RTS                
MK_ILE=*                
  LDY #$0D               
  LDA #$00               
MKF_LE=*                
  STA (DEREG),Y     ;RESET REST BYTE IN FCB TO 0    
  INY                
  CPY #$20                
  BNE MKF_LE                
  LDX #$20                
  JSR PTFBDK       ;WRITE IT BACK TO DIR TRACK   
  JMP MDFYS2       ;SET BIT 7 OF S2 TO INDICATE ACTIVED 
 ;                 
 ;******************************************************* *                
 ;*                 
 ;*  FUNCTION 20 : MAKE FILE *          
 ;*                 
 ;******************************************************* *                
 ;*                 
 ;*  ENTRY PARAMETERS :             
 ;*   REGISTER X : 14           
 ;*   REGISTER Y,A : FCB ADDRESS          
 ;*                 
 ;*  RETURNED VALUE :             
 ;*   REGISTER A : $FF DIRECTORY SPACE OVERFLOW        
 ;*      DIRECTORY ENTRY NUMBER IF SUCCESS*       
 ;*                 
 ;******************************************************* ;                
 ;                 
MAKFIL=*                
 ;                 
  JSR FCBINZ               
  LDA #$10       ;SET BIT 4 OF FLAG2 TO INDICATE  
  STA FLAG2       ;ORIGINAL MAKING       
  JMP MKFILE               
 ;                 
SETRTN=*                
 ;                 
  LDA RTNFG1               
  JMP STRTFG               
 ;                 
TETFWT=*        ;TEST FOR FILE WRITE PROTECT    
 ;                 
  JSR GETENT       ;GET DIR ENRTRY ADDR.     
  LDY #$09       ;GET DIR.T1 AND CHECK IT'S BIT 7  
  LDA (HLREG),Y               
TE_FWT=*                
  ASL                
  BCS T_TFWT               
  RTS                
T_TFWT=*                
  LDA #$07               
  JMP ERROR               
 ;                 
DLFILE=*                
 ;                 
  JSR TETWPT      ;DISK WRITE PROTECTED       
  LDX #$0C      ;FIND DESIRED DIR ENTRY      
  JSR FBDRMH               
DL_ILE=*                
  BIT FLAG               
  BPL D_FILE               
  RTS                
D_FILE=*                
  JSR TETFWT      ;FILE WRITE PROTECTED       
  JSR GETENT      ;GET DESIRED ENTRY ADDR.      
  LDY #$00      ;SET $E5 TO INDICATE DELETED     
  LDA #$E5              
  STA (HLREG),Y               
  JSR MDFMAP      ;MODIFY MAP        
  JSR PT_BDK      ;PUT DIR TO DISK      
  JSR FBDR__               
  JMP DL_ILE      ;KEEP DOING, TILL ALL DONE     
RESV12*=*+3                
 ;                 
 ;*******************************************************                 
 ;*                 
 ;* FUNCTION 2 1 : DELETE FILE           
 ;*                 
 ;*******************************************************                 
 ;*                 
 ;*  ENTRY PARAMETERS :             
 ;*   REGISTER X : 15           
 ;*   REGISTER Y,A: FCB ADDRESS           
 ;*                 
 ;* RETURNED VALUE :              
 ;*   REGISTER A : $FF FILE NOT FOUND        
 ;*     DIRECTORY ENTRY NUMBER IF SUCCESS *       
 ;*                 
 ;*******************************************************                 
 ;                 
DELFIL=*                
 ;                 
  JSR FCBINZ               
  JSR DLFILE               
  JMP SETRTN               
 ;                 
CPDRFB=*        ;COPY DIR ENTRY TO FCB    
 ;                 
  JSR GETENT               
  LDY #$00               
C_DRFB=*                
  LDA (HLREG),Y               
  STA (DEREG),Y               
  INY                
  CPY #$20               
  BNE C_DRFB               
  RTS                
 ;                 
OPFILE=*                
 ;                 
  LDX #$0D       ;FIND DESIRED DIR ENTRY     
  JSR FBDRMH               
  BIT FLAG               
  BPL O_FILE               
  RTS                
O_FILE=*                
  JSR CPDRFB       ;COPY DIR ENTRY TO FCB    
  JMP MDFYS2               
 ;                 
 ;*******************************************************                 
 ;*                 
 ;*  FUNCTION 22 : OPEN FILE           
 ;*                 
 ;*******************************************************                 
 ;*                 
 ;*  ENTRY PARAMETERS :             
 ;*   REGISTER X : 16           
 ;*   REGISTER Y,A : FCB ADDRESS          
 ;*                 
 ;*  RETURNED VALUE :             
 ;*   REGISTER A : $FF FILE NOT FOUND        
 ;*     DIRECTORY ENTRY NUMBER IF SUCCESS *       
 ;*                 
 ;*******************************************************                 
 ;                 
OPNFIL=*                
 ;                 
  JSR FCBINZ               
  JMP OPFILE               
 ;                 
CLFILE=*                
 ;                 
  LDA #$00               
  STA RTNFLG+1               
  JSR TETWPT       ;DISK WRITE PROTECTED      
  LDY #$0E               
  LDA (DEREG),Y               
  ASL                
  ASL                
  BCS C_FILE               
  RTS                
C_FILE=*                
  LDX #$0D       ;FIND A MATCHED ENTRY     
  JSR FBDRMH               
  BIT FLAG               
  BPL CL_ILE               
  RTS                
CL_ILE=*                
  JSR GETENT    ;GET THE ADDR.         
  LDY #$10               
CLFI__=*                
 ;COPY FILE LOCATION AREA IN FCB TO THE DIR ENTRY'        
 ;NOTE : IF (CORRS. BYTES NOT MATCH) AND (NONE OF '       
 ;THEM ARE 0 , THEN ERR. OTHERWISE, COPY NONE 0 BYTE'       
 ;TO 0 BYTE IF ONE OF THEM IS 0; OR LEAVE MATCHED'      
 ;PAIR ALONE'                
  LDA (DEREG),Y   ;COPY FILE LOCATION AREA IN FCB       
  BNE CLF_LE               
  LDA (HLREG),Y               
  STA (DEREG),Y               
CLF_LE=*                
  LDA (HLREG),Y               
  BNE CLFI_E               
  LDA (DEREG),Y               
  STA (HLREG),Y               
CLFI_E=*                
  LDA (DEREG),Y               
  CMP (HLREG),Y               
  BNE CLFIL_               
  INY                
  CPY #$20               
  BNE CLFI__               
  LDY #$0F    ;COPY RC' FROM FCB TO DIR ENTRY     
  LDA (DEREG),Y               
  STA (HLREG),Y               
  JMP PT_BDK    ;PUT DIR BLOCK TO DISK       
CLFIL_=*                
  DEC RTNFLG+1   ;IF ERR, SET $FF TO INDICATE NOT SUECC.     
  RTS                
 ;                 
 ;*********************************************************                 
 ;*                 
 ;*  FUNCTION 23 : CLOSE FILE           
 ;*                 
 ;*********************************************************                 
 ;*                 
 ;* ENTRY PARAMETERS :              
 ;*   REGISTER X : 17           
 ;*   REGISTER Y,A: FCB ADDRESSS;           
 ;*                 
 ;*  RETURNED VALUE :;             
 ;*   REGISTER A : $FF FILE NOT FOUND;        
 ;*   DIRECTORY ENTRY NUMBER IF SUCCESS          
 ;*                 
 ;*********************************************************                 
 ;                 
CLSFIL=*                
 ;                 
  JSR FCBINZ               
  JMP CLFILE               
 ;                 
STRTFG=*    ;SET RETURN FLAG          
 ;                 
  STA RTNFLG+1               
  RTS                
 ;                 
FLEDRT=*      ;FILE END RETURN        
 ;                 
  LDA #$01               
  JMP STRTFG               
 ;                 
GETREC=*      ;GET RC,EX,CR AND STORE THEM      
 ;                 
  LDY #$0C               
  LDA (DEREG),Y               
  STA EXNTNB               
  LDY #$0F               
  LDA (DEREG),Y               
  STA TLRCNB               
  LDY #$20               
  LDA (DEREG),Y               
  STA CRRCNB               
  RTS                
 ;                 
TETOPN=*      ;;TEST FOR FCB OPENING       
 ;                 
  LDY #$0E               
  LDA (DEREG),Y               
  ASL                
  BCS T_TOPN               
  LDA #$08               
  JMP ERROR               
T_TOPN=*                
  RTS                
 ;                 
GTBKOF=*      ;KNOWING FCB.RC TO GET CURRENT      
          ;POSITION IN FCB FILE LOCATION AREA'   
          ;TO Y AND SECTOR# WITHIN THIS BLOCK  
          ;TO TEMP2       
 ;                 
  LDA #$03               
  AND CRRCNB               
  STA TEMP2               
  LDA CRRCNB               
  LSR                
  LSR                
  CLC                
  ADC #$10               
  TAY                
  RTS                
  ;                
GTRLBS=*      ;GET PHYSICAL BLOCK NO. AND      
          ;SECTOR NO. WITHIN THE BLOCK    
 ;                 
  JSR GTBKOF      ;GET CURRENT POSITION AND      
          ;SECTOR NO. WITIHIN THE BLOCK    
                  
                  
  LDA (DEREG),Y    ;GET LOGICAL BLOCK NO.        
  BEQ G_RLBS     ;SKIP 0         
  LDX DEREG               
  STX HLREG     ;CACULATE PHYSICAL BLOCK NO.1       
  LDX DEREG+1               
  STX HLREG1+1               
  JSR GTBKNB               
  LDX #$01               
G_RLBS=*                
  RTS                
 ;                 
GTTKSC=*     ;GET TRACK# AND PHYSICAL SECTOR       
         ;WITHIN THIS TRACK       
         ;ENTRY PHYSICAL BLOCK# IN A,TEMP     
         ;EXIT X TRACK#,A PHYSICAL SECTOR     
 ;                 
  LDX #$FF               
G_TKSC=*                
  SEC                
  INX       ;BLOCK#  DIV 7 TO GET TRACK NO.  
  SBC #$07               
  BCS G_TKSC               
  DEC TEMP               
  BPL G_TKSC               
  ADC #$07     ;BLOCK# MOD 7        
  ASL                
  ASL       ;(BLOCK# MOD 7)*4       
  CLC                
  ADC TEMP2     ;ADDING THE SECTOR NO. WITHIN      
         ;THE BLOCK TO GET SECTOR NO. '   
         ;WITHIN THE TRACK       
  PHA                
  TXA                
  SED                
  ADC #$04 ;              
  CLD                
  TAX       ;PUT TRACKNO.TO X       
  PLA       ;PUT SECTOR NO. TO A     
  RTS                
 ;                 
RWSCDF=*     ;READ A SECTOR INTO DEFAULT BUFFER      
 ;                 
  STX TRKNUB               
  JSR SETSC1               
  TXA                
  JSR SETTR1     ;SET TRACK NO.        
  JMP RWDBS1               
 ;                 
MDFFCB=*     ;MODIFY FCB TO FIT NEXT OPERATION      
 ;                 
  BIT FLAG2     ;RAN. OR SEQ. MODE?       
  BPL M_FFCB               
  INC CRRCNB               
M_FFCB=*                
  LDA CRRCNB               
  LDY #$20               
  STA (DEREG),Y    ;STORE TO FCB.CR         
  LDA TLRCNB               
  LDY #$0F               
  STA (DEREG),Y    ;STORE TO FCB.RC         
  RTS                
 ;                 
HDNTEN=*     ;DEAL WITH NEXT EXTENT ENTRY       
 ;                 
  JSR CLFILE     ;CLOSE THE CURRENT EXTENT       
  LDX RTNFLG+1    ;$FF MEANS NOT SUCCES.        
  INX                
  BNE H_NTEN     ;SUCCES! CONTINUE.         
  RTS                
H_NTEN=*                
  LDY #$0C               
  LDA #$01               
  CLC                
  ADC (DEREG),Y    ;INCREAMENT EX' BY 1        
  STA (DEREG),Y               
  LDX #$0D     ;FIND A CORRES. EX' IN DIR     
  JSR FBDRMH               
  BIT FLAG     ;FOUND?          
  BPL H__TEN               
  BIT FLAG2     ;IF NOT, CHHECK R OR W?     
  BVC HDN_EN               
  JMP FLEDRT     ;IF R, ERR        
HDN_EN=*                
  JSR MKFILE     ;IF W, CREATE A NEW EX'     
  BIT FLAG               
  BPL HDNT_N               
  LDA #$03               
  JMP STRTFG               
H__TEN=*                
  JSR O_FILE     ;COPY CORRES. BYTES IN DIR TO FCB    
HDNT_N=*                
  JSR GETREC     ;GET EX','RC','CR' AND STORE THEM      
  LDA #$00               
  JMP STRTFG     ;SET SUCCES.FLAG         
 ;                 
RDRCS1=*                
 ;                 
  JSR TETOPN     ;FILE OPENED?         
  LDA #$E0     ;SET FLAG2 TO INDICATE SEQ. R     
  STA FLAG2               
RDRCS_=*                
  JSR GETREC               
  LDA CRRCNB     ;'CR'<'RC'?          
  CMP TLRCNB               
  BCC R_RCSQ     ;YES, GO AHEAD TO READ      
  CMP #$40     ;NO, CHECK CR'=$40?        
  BEQ RD_CSQ               
  JMP FLEDRT     ;IF NOT,ERR         
RD_CSQ=*                
  JSR HDNTEN     ;CLOSE CURRENT EX', OPEN NEXT      
  LDA #$00     ;RESET CRRCNB         
  STA CRRCNB               
  LDA RTNFLG+1    ;SUCCES.           
  BEQ R_RCSQ               
  JMP STRTFG               
R_RCSQ=*                
  JSR GTRLBS     ;GET PHY. BLOCK NO.       
  BNE RDRC_Q               
  LDA #$02     ;IF CORRES. LOG. BLO. NO.=0, ERR     
  JMP STRTFG               
RDRC_Q=*                
  JSR GTTKSC     ;GET TRACK NO. & SECTOR NO.     
  LDY #$10               
  STY FLAG               
  JSR RWSCDF     ;READ A SECTOR        
  JMP MDFFCB     ;MODIFY BIT MAP        
 ;                 
 ;*******************************************************                 
 ;*                 
 ;*  FUNCTION 24 : READ SEQUENTIALLY           
 ;*                 
 ;*******************************************************                 
 ;                 
 ;* ENTRY PARAMETERS               
 ;*  REGISTER X : 18            
 ;*  REGISTER Y , A : FCB ADDRESS         
 ;*                 
 ;*    RETURNED VALUE            
 ;*    REGISTER A:$00 SUCCESS           
  ;*       1 FILE END       
  ;*       2 RECORD NOT IN DISK     
  ;*                
  ;*******************************************************                
 ;                 
RDRCSQ=*                
  ;                
  JSR FCBINZ               
  JMP RDRCS1               
 ;                 
FNDEPT=*     ;FIND EMPTY BLOCK,ENTRY A,TEMP        
         ;PHY. BLOCK OF THE ONE BEFORE IT   
         ;EXIT A,TEMP EMPTY PHY. BLOCK#     
                  
  STA BKRBLK     ;SET BK. & AD. COUNTER      
  STA ADVBLK               
  LDA TEMP               
  STA BKRBLK+1               
  STA ADVBLK+1               
  LDA #$01     ;SET CURRENT POINTER ODD OR EVEN FLAG    
  AND BLKOFS               
  STA BKOSFG               
F__EPT=*                
                  
  LDA BKRBLK      ;BK. SEARCK REACH BOTTOM?      
  ORA BKRBLK+1               
  BEQ F_DEPT      ;YES:GO TO AD. SEARCH      
FN__PT=*                
  LDA BKRBLK               
  BNE FN_EPT      ;BK. SEARCH        
  DEC BKRBLK+1               
FN_EPT=*                
  DEC BKRBLK               
  LDA BKRBLK     ;BK. COUNTER MATCH THE E/O FLAG SET BEF?   
  AND #$01               
  CMP BKOSFG               
  BNE F__EPT               
  LDA BKRBLK      ;NO, SKIP IT       
  LDX BKRBLK+1     ;YES, GET CORRES. BYTE & BIT PATTERN    
  STX TEMP      ;IN BIT MAP AREA      
  JSR GTMAPB               
  TAX                
  AND (MAPBFA),Y               
  BNE F_DEPT      ;OCCUPIED?         
  TXA        ;:YES: TO AD. SEARCH     
  ORA (MAPBFA),Y     ;NO,SET BIT MAP        
  STA (MAPBFA),Y               
  LDA BKRBLK+1               
  STA TEMP      ;BK. COUNTER AS FOUND PHY. BLOCK    
  LDA BKRBLK      ;NO. THEN RETURN       
  RTS                
F_DEPT=*                
  LDA ADVBLK               
  CMP #$FF      ;AD. SEARCH TOP REACHED?      
  BNE FND_PT               
  LDA ADVBLK+1               
  CMP #$01               
  BEQ FNDE_T      ;YES: TO CHECK IF BA. BOTTOM REACHED?   
FND_PT=*                
  INC ADVBLK      ;INCREMENT AD. COUNTER BY 1     
  BNE FNDE__               
  INC ADVBLK+1               
FNDE__=*                
  LDA ADVBLK      ;THE SAME PROCESS AS IN BA. SEARCH   
  AND #$01               
  CMP BKOSFG               
  BNE F_DEPT               
  LDA ADVBLK               
  LDX ADVBLK+1               
  STX TEMP               
  JSR GTMAPB               
  TAX                
  AND (MAPBFA),Y               
  BNE F__EPT               
  TXA                
  ORA (MAPBFA),Y               
  STA (MAPBFA),Y               
  LDA ADVBLK+1               
  STA TEMP               
  LDA ADVBLK               
  RTS                
FNDE_T=*                
  LDX BKRBLK+1     ;BA. BOTTOM ALSO REACHED?       
  INX                
  BNE FN__PT      ;NO, TO BA. SEARCH      
  LDA #$A8      ;REPORT MAP OVERFLOW       
  STA FLAG2               
  RTS                
 ;                 
RELFOM=*      ;PHY. BLOCK# TO LOGICAL ONE      
          ;EXIT X LOGICAL BLOCK#     
 ;                 
  LDX TEMP               
  STX TEMP1               
  PHA                
  INC BLKOFS      ;GET CURRENT POSITION IN      
  LDA BLKOFS      ;FCB FILE LOCATION AREA      
  LSR        ;EVEN OR ODD?      
  PLA                
  ADC #$01      ;EVEN/ADD 1;ODD,ADD 2       
  BCC R_LFOM      ;TO PHY. BLOCK#       
  INC TEMP1               
R_LFOM=*                
  LSR        ;DIVIDED BY 2      
  LSR TEMP1               
  BCC RE_FOM               
  ORA #$80               
RE_FOM=*                
  TAX                
  DEC BLKOFS               
  RTS                
 ;                 
WTRCS1=*                
 ;                 
  JSR TETOPN      ;OPENED?         
  LDA #$A0      ;SET FALG2 TO INDICATE SEQ. W    
  STA FLAG2               
WTRCS_=*                
  JSR TETWPT      ;DISK W PROTECTED?       
  LDY #$09               
  LDA (DEREG),Y               
  JSR TE_FWT      ;FILE W PROTECTED?       
  JSR GETREC               
  LDA CRRCNB      ;'CR'<$40         
  CMP #$40               
  BCC W_RCSQ               
  JMP FLEDRT               
W_RCSQ=*                
  JSR GTBKOF      ;GET CUR. RECORD POST. IN     
          ;FILE LOCATION AREA'      
  STY BLKOFS               
  LDA (DEREG),Y     ;GET LOG. BLOCK NO.       
  BEQ WTR___      ;IF 0,GO TO FIND EMPTY BLOCK    
  JSR GTRLBS      ;NO,GET CORRES. PHY. BLOCK NO.     
WTRC__=*                
  JSR GTTKSC      ;GET TRACK# & SECTOR#      
  LDY #$50               
  STY FLAG      ;SET WRITE' TO FLAG      
  JSR RWSCDF      ;WRITE A RECORD       
  LDY #$0E               
  LDA #$C0               
  STA (DEREG),Y     ;SET WRITTEN' FLAG IN FCB.S2      
  LDA CRRCNB      ;'CR'<'RC'         
  CMP TLRCNB               
  BCC WTR__Q      ;GO AHEAD WITH NO INCRESE RC'    
  STA TLRCNB      ;STORE CR' TO RC'      
  INC TLRCNB      ;INCRESE RC' BY 1      
WTR__Q=*                
  CMP #$3F      ;'CR'=$3F?         
  BNE WT__SQ      ;NO,MODIFY FCB & RETURN      
  BIT FLAG2      ;OTHERWISE, CHECK RANDOM       
  BPL WT__SQ               
  JSR MDFFCB      ;IF SEG. CLOSE THIS EXTENT &    
  JSR HDNTEN      ;OPEN NEXT        
  LDA RTNFLG+1               
  BNE W__CSQ      ;IF UNSUCC., LEAVE CR'=$3F ALONE     
  LDA #$FF      ;IF SUCC., SET CR'=$FF      
  STA CRRCNB               
W__CSQ=*                
  LDA #$00               
  STA RTNFLG+1               
WT__SQ=*                
  JMP MDFFCB               
WTR___=*      ;MODIFY FCB, CR' WILL BE 40 OR 0   
  STA TEMP      ;FIND AN EMPTY BLOCK      
  LDA #$01               
  CPY #$10               
  BEQ WT_CSQ      ;FIRST POINTER?        
  DEY        ;YES, SET BASS PHY. BLOCK# TO 1  
  LDA (DEREG),Y               
  BEQ WT_CSQ     ;NO, GET PHY. BLOCK# BEFORE IT    
  LDA DEREG      ;0?         
  STA HLREG1      ;NO, CONVERT IT TO BASS BLOCK#    
  LDA DEREG+1               
  STA HLREG1+1               
  JSR GTBKNB               
WT_CSQ=*                
  JSR FNDEPT      ;TO FIND AN EMPTY BLOCK     
  TAX                
  LDA #$08      ;MAP OVERFLOW?        
  BIT FLAG2               
  BEQ WTR_SQ               
  LDA #$02               
  JMP STRTFG               
WTR_SQ=*                
  TXA                
                  
  PHA                
  JSR RELFOM       ;NO,CHANGE FOUND# TO CORRES, LOGICAL#    
  LDY BLKOFS               
  NOP                
  NOP                
  NOP                
  TXA                
  STA (DEREG),Y      ;STORE TO COORES POINTER      
  PLA         ;WRITE THE RECORD TO FIRST   
  JMP WTRC__       ;SECTOR OF FOUND BLOCK     
 ;                 
 ;                 
 ;                 
 ;********************************************************                 
 ;*                 
 ;*  FUNCTION 2 5 : WRITE SEQUENTIALLY          
 ;*                 
 ;************************************************                 
 ;*                 
 ;* ENTRY PARAMETERS               
 ;*  REGISTER X : 19            
 ;*  REGISTER Y,A : FCB ADDRESS           
 ;*                 
 ;*  RETURNED VALUE:              
 ;*  REGISTER A : #$00 SUCCESS           
 ;*      1 CAN'T CLOSE OR OPEN NEXT      
 ;*      EXTENT           
 ;*      2 MAP OVERFLOW         
 ;*                 
 ;*******************************************************                 
 ;                 
WTRCSQ=*                
 ;                 
  JSR FCBINZ               
  JMP WTRCS1               
 ;                 
 ;                 
FNDCRN=*       ;FIND CURRENT LOGIC RECORD#      
          ;AND EXTENT       
 ;                 
  LDY #$21       ;GET R0       
  LDA (DEREG),Y               
  AND #$3F       ;CACULATE DESIRED RECORD#      
  LDY #$20               
  STA (DEREG),Y      ;STORE TO FCB.CR       
  INY                
  LDA (DEREG),Y      ;GET R0 AGAIN       
  STA TEMP1               
  INY                
  LDA (DEREG),Y      ;GET R1        
  STA EXNTNB       ;CACULATE THE EX' DESIRED     
  ROL TEMP1               
  ROL EXNTNB               
  ROL TEMP1               
  ROL EXNTNB               
  LDA EXNTNB       ;DESIRED EX'=CURRENT EX'?      
  LDY #$0C               
  CMP (DEREG),Y               
  BEQ FN_CRN               
  JSR CLFILE       ;IN NOT, CLOSE CURRENT EXTENT    
  LDX RTNFLG+1      ;SUCCESS?         
  LDA #$03               
  INX                
  BEQ FNDCR_               
  LDA EXNTNB       ;YES,STORE DESIRED TO FCB.CR     
  LDY #$0C               
  STA (DEREG),Y               
  JSR OPFILE       ;OPEN THIS EXTENT      
  LDX RTNFLG+1      ;SUCCESS?         
  INX                
  BNE FN_CRN               
  LDA #$04       ;IF NOT, CHECK R OR W   
  BIT FLAG2               
  BVS FNDCR_               
  JSR MKFILE       ;IF W, CREATE A NEW NEXT   
  LDA #$05               
  LDX RTNFLG+1      ;SUCCESS?         
  INX                
  BEQ FNDCR_       ;IF NOT REPORT ERR     
FN_CRN=*                
  LDA #$00               
FNDCR_=*                
  JMP STRTFG               
 ;                 
RDRCR1=*                
 ;                 
  JSR TETOPN               
  LDA #$60       ;SET FLAG TO INDICATE RANDOM R   
  STA FLAG2               
  JSR FNDCRN     ;FOND EX' & CR' DESIRED      
  BNE R_RCRM               
  JMP RDRCS_     ;IF SUCCESS, READ THE RECORD      
R_RCRM=*                
  RTS                
 ;                 
 ;*******************************************************                 
 ;*                 
 ;* FUNCTION 26 :READ RANDOM             
 ;*                 
 ;*******************************************************                 
 ;*                 
 ;* ENTRY PARAMETERS :              
 ;*  REGISTER X #$1A             
 ;*  REGISTER Y,A: FCB ADDRESS            
 ;*                 
 ;* RETURNED VALUE :              
 ;*  REGISTER A : 0 SUCCESS           
 ;*     1 READ UNWRITTEN DATA         
 ;*     3 CAN'T CLOSE CURRENT EXTENT        
 ;*     4 SEEK TO UNWRITTEN EXTENT        
 ;*                 
 ;*******************************************************                 
 ;                 
RDRCRM=*                
 ;                 
  JSR FCBINZ               
  JMP RDRCR1               
 ;                 
WTRCR1=*                
 ;                 
  JSR TETOPN     ;DISK W PROTECTED?        
  LDA #$20     ;SET FLAG TO INDICATE RANDOM W     
  STA FLAG2               
  JSR FNDCRN     ;FIND EX' & CR' DESIRED      
  BNE W_RCRM               
  JMP WTRCS_     ;IF SUCCESS, WRITE THIS RECORD      
W_RCRM=*                
  RTS                
 ;                 
 ;                 
 ;                 
 ;                 
 ;                 
 ;                 
 ;                 
 ;                 
 ;                 
 ;                 
 ;                 
 ;                 
 ;                 
 ;                 
 ;***************************************************                 
 ;*                 
 ;* FUNCTION 27 : WRITE RANDOM            
 ;*                 
 ;**************************************************                 
 ;*;                 
 ;*  ENTRY PARAMETERS :;             
 ;*   REGISTER X : $1B           
 ;*  REGISTER Y,A: FCB ADDRESS            
 ;*                 
 ;* RETURNED VALUE               
 ;*  REGISTER A : $00SUCCESS            
 ;*     2 MAP OVERFLOW          
 ;*     3 CAN'T CLOSE CURRENT EXTENT        
 ;*     5 DIRECTORY OVERFLOW          
 ;*                 
 ;*******************************************************                 
 ;                 
WTRCRM=*                
 ;                 
  JSR FCBINZ               
  JMP WTRCR1               
 ;                 
 ;******************************************************                 
 ;*                 
 ;* FUNCTION 28 : SEARCH FOR FIRST           
 ;*                 
 ;***************************************************                 
 ;*                 
 ;*  ENTRY PARAMETERS : *            
 ;*  REGISTER X : $1C            
 ;*  REGISTER Y,A:FCB ADDRESS             
 ;*                 
 ;* RETURNED VALUE :              
 ;*  REGISTER A : $FF FILE NOT FOUND         
 ;*     NUMBER OF DESIRED ENTRY WHITHIN        
 ;*     DIRECTORY BLOCK           
 ;*                 
 ;*******************************************************                 
 ;                 
SHFIST=*                
  JSR FCBINZ      ;INITIALIZE FCB        
  LDA DEREG      ;RESERV FCB ADR FOR      
          ;SERCH NEXT       
  STA CBADRV               
  LDA DEREG+1               
  STA CBADRV+1               
  LDX #$0D      ;FIND DESIRED DIR       
  JSR FBDRMH               
  BIT FLAG      ;IF NOT FOUND,RETURN WITH A=FF     
  BPL S_FIST               
  RTS                
S_FIST=*                
  LDA DRERNB               
  STA CBADRV+2
                
  LDA #<DFBUFA     ;IF FOUND,COPY DIRBUFFER TO      
          ;DEFAULT BUFFER       
  STA HLREG1               
  LDA #DFBUFA/256               
  STA HLREG1+1               
  LDA DIRBFA               
  STA HLREG               
  LDA DIRBFA+1               
  STA HLREG+1               
  LDA #$00               
  STA TEMP               
  LDA RTNFLG+1               
  AND #$0C               
  LDX #$05               
  JSR ASLDSR               
  JSR ADCOFS      ;GET THE ADDR. OF MATCHE DRECORD    
  LDY #$00               
SH_IST=*                
  LDA (HLREG),Y     ;COPY MATCHED DIR TO DEFAULT BUFFER     
  STA (HLREG1),Y               
  INY                
  CPY #$80               
  BNE SH_IST               
  LDA RTNFLG+1     ;GET THE OFFSET AWAY FROM THE START    
  AND #$03               
  STA RTNFLG+1               
  RTS                
 ;                 
 ;**********************************************************                 
 ;*                 
 ;* FUNCTION 2 9 SEARCH FOR NEXT           
 ;*                 
 ;**********************************************************                 
 ;*                 
 ;*  ENTRY PARAMETERS :             
 ;*  REGISTER X : 10            
 ;*                 
 ;* RETURNED VALUE :*              
 ;*  REGISTER A : $FF FILE NOT FOUND         
 ;*   NUMBER OF DESIRED ENTRY WITHIN          
 ;*   DIRECTORY BLOCK             
 ;*                 
 ;**********************************************************                 
 ;                 
SHNEXT=*                
 ;                 
  LDA CBADRV      ;GET RESERVED ADR       
  STA DEREG               
  LDA CBADRV+1               
  STA DEREG+1               
  JSR FCBINZ               
  LDA #$FF               
  STA FLAG1               
  STA RTNFG1               
  LDX #$0D               
  LDA CBADRV+2               
  JSR FBD___      ;GO AHEAD TO FIND NEXT USING    
          ;PREVIOUS FCB AND THE PREVIOUS FOUND   
          ;ENTRY        
  BIT FLAG               
  BPL S_FIST      ;IF FOUND, GO TO COPY THEM    
  RTS                
 ;                 
TETDUP=*                
 ;                 
  CLC                
  LDA DEREG      ;CHANGE ADDR. TO FCB LOCATION AREA    
  ADC #$10               
  STA DEREG               
  BCC T_TDUP               
  INC DEREG+1               
T_TDUP=*                
  LDX #$0C               
  JSR FBDRMH       ;TRY TO FIND DUPLICATE     
  BIT FLAG               
  BMI TE_DUP               
  PLA         ;IF FOUND,REPORT ERR     
  PLA                
  LDA #$80               
  JMP STRTFG               
TE_DUP=*                
  CLC                
  LDA DEREG       ;NO, RECOVE THE FCB ADDR.    
  ADC #$F0               
  STA DEREG               
  LDA DEREG+1               
  ADC #$FF               
  STA DEREG+1               
  RTS                
 ;                 
RENAMM=*                
 ;                 
  JSR TETWPT       ;DISK W PROTECTED?      
  LDX #$0C               
  JSR FBDRMH       ;TRY TO FIND THE OLD FILE   
RE_AMM=*                
  BIT FLAG       ;FOUND?        
  BPL R_NAMM               
  RTS                
R_NAMM=*                
  JSR TETFWT       ;FILE W PROTECTED      
  JSR GETENT       ;GET DIR ENTRY      
  LDA #$FF              
  STA TEMP               
  LDA #$F0               
  JSR ADCOFS       ;SUBTRACT FROM 10      
  LDX #$0C               
  LDY #$10               
  JSR P_FBDK      ;MODIFY DIR DR-T3 ACCORDING TO FCB    
          ;DO-D1 AND WRITE IT BACK TO DISK DIR. 
  JSR FBDR__      ;FIND NEXT EXTENT AND DEAL WITH IT   
          ;UNTIL ALL FILES ARE DEALT.    
  JMP RE_AMM               
 ;                 
 ;****************************************************                 
 ;*                 
 ;* FUNCTION 30 : RENAME FILE;            
 ;*                 
 ;*********************************************************                 
 ;*                 
 ;* ENTRY PARAMETERS :              
 ;*  REGISTER X : $1E            
 ;*  REGISTER Y,A: FCB ADDRESS            
 ;*                 
 ;* RETURNED VALUE :              
 ;*  REGISTER A : #$FF FILE NOT FOUND         
 ;*     80 THE NEW NAME IS ALREADY IN DIR.     
 ;*     DIR CODE FROM $00-$6F IF SUCCESS ;      
 ;*                 
 ;**********************************************************                 
 ;                 
RENAME=*                
 ;                 
  JSR FCBINZ               
  LDY #$00    ;COPY DR' IN OLD FILE TO DR' IN    
  LDA (DEREG),Y   ;NEW FILE           
  LDY #$10              
  STA (DEREG),Y               
  JSR TETDUP    ;TEST DUPLICATE          
  JSR RENAMM    ;RENAME!           
  JMP SETRTN               
 ;                 
CHATRT=*                
 ;                 
  JSR TETWPT               
  LDX #$0C    ;TRY TO FIND A ENTRY IN DIR     
  JSR FBDRMH               
CH_TRT=*                
  BIT FLAG               
  BPL C_ATRT               
  RTS                
C_ATRT=*                
  LDX #$0C    ;COPY FCB TO DIR TO CHANGE THE     
  JSR PTFBDK     ;ATTR.          
  JSR FBDR__    ;KEEP FINDING          
  JMP CH_TRT               
 ;                 
 ;                 
 ;                 
 ;                 
 ;                 
                  
                  
                  
                  
 ;******************************************************                 
 ;*                 
 ;*  FUNCTION 31 : CHANGE ATTRIBUTES           
 ;*                 
 ;*******************************************************                 
 ;*                 
 ;*  ENTRY PARAMETERS              
 ;*   REGISTER X : $1F           
 ;*   REGISTER Y,A : FCB ADDR.          
 ;*                 
 ;*  RETURNED VALUE : $FF FILE NOT FOUND         
 ;*      DIR NO. IF SUCCESS        
 ;*                 
 ;****************************************************                 
 ;                 
CHATRB=*                
 ;                 
  JSR FCBINZ               
  JSR CHATRT               
  JMP SETRTN               
 ;                 
 ;*******************************************************                 
 ;*                 
 ;* FUNCTION 32 : COMPUTE FILE SIZE           
 ;*                 
 ;*******************************************************                 
 ;*                 
 ;* ENTRY PARAMETERS               
 ;*  REGISTER X : 20            
 ;*  REGISTER Y,A : FCB ADDRESS           
 ;*                 
 ;* RETURNED VALUE :              
 ;*  REGISTER A : $FF FILE NOT FOUND         
 ;*    OTHERWISE R0,R1 CONTAIN FILE SIZE         
 ;*                 
 ;*******************************************************                 
 ;                 
CPFISZ=*                
 ;                 
  JSR FCBINZ               
  LDA #$00      ;INIT. R0 &R1      
  LDY #$21               
  STA (DEREG),Y               
  INY                
  STA (DEREG),Y               
  LDX #$0C      ;GO AHEAD TO FIND THE FILE    
  JSR FBDRMH               
CPF_SZ=*                
  BIT FLAG      ;FOUND?         
  BPL C_FISZ               
  RTS                
C_FISZ=*                
  JSR GETENT       ;YES,SET HLREG ADDRESS OF THIS ENTRY   
  LDY #$0F               
                  
                  
                  
                  
                  
                  
                  
  LDA (HLREG),Y      ;GET THE NUMBER OF TOTAL RECORDS    
  CLC                
  LDY #$21       ;BE ADDED TO SUN STORED IN R0,R1 
  ADC (DEREG),Y               
  STA (DEREG),Y               
  BCC CP_ISZ               
  INY                
  LDA #$00               
  ADC (DEREG),Y               
  STA (DEREG),Y               
CP_ISZ=*                
  JSR FBDR__       ;KEPT FINDING UNTIL WHOLE DIRECTORY IS   
           ;SEARCHED       
  JMP CPF_SZ               
 ;                 
 ;*********************************************************                 
 ;*                 
 ;* FUNCTION 33 : SET RANDOM RECORD           
 ;*                 
 ;********************************************************* *                
 ;* ENTRY PARAMETERS :              
 ;*  REGISTER X : 21            
 ;*  REGISTER Y,A: FCB ADDRESS            
 ;*                 
 ;* RETURNED VALUE :              
 ;*  REGISTER A :$FF FILE NOT FOUND          
 ;*     OTHERWISE R0,R1 CONTAIN NUMBER OF        
 ;*     DESIRED RECORD WITH R0 BEING THE       
 ;*     LEAST SIGNIFICANT BYTE          
 ;*                 
 ;*********************************************************                 
 ;                 
 ;                 
STRDRC=*                
 ;                 
  LDY #$0C      ;GET EX'        
  LDA (DEREG),Y               
  STA TEMP1               
  LDY #$20      ;GET CR        
  LDA (DEREG),Y               
  LSR TEMP1      ;RIGHT SHIFT EX' ONCE      
  BCC S_RDRC               
  NOP        ;THAT MEANS NUMBER      
          ;OF RECORDS SOULD BE ADDED BY 40  
  ADC #$3F               
S_RDRC=*                
  LSR TEMP1      ;RIGHT SHIFT EX' AGAIN      
  BCC ST_DRC               
  NOP        ;NUMBER OF RECORDS      
          ;SHOULD BE ADDED BY 80    
  ADC #$7F               
ST_DRC=*                
  LDY #$21      ;NOW PUT THE LOWER BYTE OF TOTAL NUMBER 
  STA (DEREG),Y     ;TO THE R0        
  INY                
  LDA TEMP1       ;THE HIGHER BYTE TO R1    
  STA (DEREG),Y               
  RTS                
 ;                 
 ;                 
 ;                 
 ;                 
 ;                 
 ;                 
 ;                 
 ;                 
 ;                 
 ;*******************************************************                 
 ;*                 
 ;* FUNCTION 34 : SENT I/O BUFFER BACK TO DISK        
 ;*                 
 ;*******************************************************                 
 ;*                 
 ;*  ENTRY PARAMETERS :             
 ;*   REGISTER X : 22           
 ;*                 
 ;******************************************************                 
 ;                 
SIODSK=*                
 ;                 
  JMP SIOBDK               
 ;                 
RETURN=*                
 ;                 
  LDA RTNFLG     ;DISK NEEDS TO CHANGE BACK?      
  BEQ R_TURN               
  LDA #$00               
  TAY                
  STA (DEREG),Y               
  LDA CRTDRN     ;STORE BACK THE DR'       
  BEQ R_TURN               
  STA (DEREG),Y               
  LDA PRVDSK     ;GET RESERVED DISK NO.       
  STA DERDSK               
  JSR SELDSK     ;CHANGE BACK TO CURRENT DISK      
R_TURN=*                
  LDY RTNFLG+2    ;RETURN THE FLAG OR ADDR. NEEDED      
  LDA RTNFLG+1               
  RTS                
  .END                
