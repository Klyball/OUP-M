  ;OUP/M BDOS WRITTEN BY SHAO, JIAN - XIONG         
  ;ERROR NO. LISTING              
  ;$02 DISK NO. TOO LARGE            
  ;$03 FUNCTION NO. TOO LARGE            
  ;$04 DISK WRITING PROTECTION             
  ;$05 DUPLICTED FILE WHEN MAKE FILE           
  ;$06 CHECK AREA NOT MATCH            
  ;$07 FILE WRITING PROTECTION             
  ;$08 FILE NOT OPEN             
  *=$D93A                
START=$00      ;WARM BOOT ADDR.        
IOBYTE=$03      ;I/O BYTE         
CREG=$08      ;WORK STORAGE         
DEREG=$09                
HLREG=$0B                
HLREG1=$0D                
USERSP=$10                
RTNFLG=$18      ;RETURN FLAG         
TEMP=$1F                
CRTDRN=$25      ;'DR' RESERVATION         
SCNPTS=$38      ;SCREEN LINE START POINTER       
CHRNUB=$3E      ;CHAR. NOS IN INPUT BUFFER      
CSBUFS=$3F      ;OFFSET OF LAST CHAR TO      
          ;STARING ADDRESS OF THE BUFFER    
COUNT=$3D                
BRHTAB=$DBC3     ;BDOS           
ADCOFS=$DC80                
STRTFG=$DFDA                
RETURN=$E3D8                
R_TURN=$E3EE                
WBOOT=$E477      ;BIOS          
CSLTET=$E560                
CLINN=$E57A                
CLOUTT=$E591                
LITOUT=$E5A9                
ERROR=$E928                
BANBAC .BYTE $00    ;NO. COUNTER OF BACK SPACE       
PRTFLG .BYTE $00    ;PRINTER ON/OFF FLAG         
SCNPNT .BYTE $00    ;SCREEN LINE COUNTER         
PRECHR .BYTE $00    ;PREVIOUS CHARACTER          
WMBCOT .BYTE $2D    ;           
 ;                 
BDOS=*                
 ;                 
  STX CREG      ;STORE PARAMETERS        
  STA DEREG               
  STY DEREG+1               
  LDA #$00      ;INIT. SOME LOCATIONS FOR      
  STA CRTDRN      ;RETURN ROUTINE        
  STA RTNFLG               
  STA RTNFLG+1               
  STA RTNFLG+2  
  
  ;MODIFIED HERE             
  LDA #>RETURN-1 ;/256               
  PHA        ;SET RETURN ROUTINE ADDR.     
  LDA #<RETURN-1               
                
  PHA                
  LDA CREG    ;CHECK FUNCTION NO. LEGALITY        
  CMP #$29               
  BCC B_OS               
  LDA #$03    ;IF ILLEGAL, ERR!         
  JMP ERROR               
B_OS=*                
  ASL                
  LDX #<BRHTAB    ;ADDRESS FROM BRHTAB         
  STX HLREG               
  LDX #BRHTAB/256               
  STX HLREG+1               
  LDY #$00               
  STY TEMP               
  JSR ADCOFS               
  LDA (HLREG),Y               
  STA HLREG1               
  INY                
  LDA (HLREG),Y               
  STA HLREG1+1               
  LDA DEREG               
  JMP (HLREG1)    ;JMPE TO DESIRED ROUTINE        
REV1*=*+40                
 ;                 
 ;******************************************************                 
 ;*                 
 ;* FUNCTION 0 : SYSTEM RESET            
 ;*                 
 ;********************************************************                 
 ;*                 
 ;* ENTRY PARAMETERS :              
 ;*  REGISTER X : 0            
 ;*                 
 ;*******************************************************                 
 ;                 
SYMRST=*                
 ;                 
  JMP WBOOT;               
 ;                 
INCHR=*     ;GET A CHARACTER FROM CONSOLE       
 ;                 
  LDA PRECHR               
  BEQ I_CHR               
  LDX #$00               
  STX PRECHR               
  RTS                
I_CHR=*                
  LDX #$00               
  STX PRECHR               
  JMP CLINN               
RESV2*=*+4                
 ;                 
 ;*****************************************************                 
 ;*                 
 ;* FUNCTION 1 : CONSOLE INPUT            
 ;*                 
 ;*****************************************************                 
 ;*                 
 ;* ENTRY PARAMETERS :              
 ;*  REGISTER X : 1            
 ;*                 
 ;* RETURNED VALUE :              
 ;*  REGISTER A : ASCII CHARACTER           
 ;*                 
 ;***************************************************                 
 ;                 
CSLIN=*                
 ;                 
  JSR INCHR       ;GET A CHAR FROM CONSOLE    
  JSR C_LIN       ;HANDLING CONTROL CHARACTER      
  BCC CS_IN       ;IF CONTROL CHAR EXCEPT     
           ;'CR','LF','BA','TAB',THEN RETURN      
  PHA                
  JSR CSLOUT               
  PLA                
CS_IN=*                
  JMP STRTFG               
C_LIN=*                
  CMP #$0D       ;'CR'?        
  BNE CSLIN1               
  RTS                
CSLIN1=*                
  CMP #$0A       ;'LF'?        
  BNE CSLIN2               
  RTS                
CSLIN2=*                
  CMP #$09       ;'TAB'?        
  BNE CSLIN3               
  RTS                
CSLIN3=*                
  CMP #$08       ;'BA'?        
  BNE CSLIN4               
  RTS                
CSLIN4=*                
  CMP #$20               
  RTS                
  ;                
INTPHD=*       ;INTERUPTING CHAR HANDLING       
  ;                
  LDA PRECHR       ;CHECK IF THERE IS A PREVIOUS CHAR  
  BNE INTPH_               
  JSR CSLTET       ;TEST IF CONSOLE IS READY    
  AND #$01               
  BEQ I_TPHD               
  JSR CLINN       ;IF READY,READ A CHAR.     
  CMP #$13      ;CONTROL-S?         
  BNE IN_PHD               
INT_HD=*                
  JSR CLINN      ;IF IT IS CONTROL-S,WAIT UNTIL NEXT    
          ;CHAR COMING IN.      
  CMP #$03      ;CONTROL-C?         
  BNE INTP_D               
  JMP $0000      ;IF IS,TO WARM BOOT      
INTP_D=*                
  LDA $00       ;IF ANOTHER CHARACTER,RETURN      
  RTS                
IN_PHD=*                
  STA PRECHR      ;WHEN FIRST RENDING IS NOT CTRL-S    
          ;STORE IT TO PREV. CHAR. LOCATION   
INTPH_=*                
  LDA #$FF               
I_TPHD=*                
  RTS                
 ;                 
OUTCHR=*      ;OUTPUT A CHARACTER        
 ;                 
  PHA                
  LDA BANBAC      ;TO SEE IF THIS IS FROMN BA'   
  BNE O_TCHR      ;IF IS,NOT OUTPUT TO CSL     
  JSR INTPHD      ;HANDLING INTERUPTING CHAR.       
  PLA                
  PHA                
  JSR CLOUTT      ;OUTPUT TIS CHAR TO CONSOLE     
  PLA                
  PHA                
  LDX PRTFLG      ;TO SEE IF PRINTER      
  BEQ O_TCHR               
  JSR LITOUT      ;IF ON,ALSO SENT TO PRINTER.     
O_TCHR=*                
  PLA                
  CMP #$7F      ;IF IS DEL' ,RETURN,THAT IS, NOT    
          ;INCREASING SCNPNT       
  BNE OU_CHR               
  RTS                
OU_CHR=*                
  INC SCNPNT      ;IF IT LESS THAN $7F, GREATER THEN   
          ;EQUALTO $20, SCNPNT INCREASED     
          ;BY 1       
  CMP #$20               
  BCC OUT_HR               
  RTS                
OUT_HR=*                
  DEC SCNPNT      ;IF IT IS CTRL CHAR.,THAT IS, LESS   
          ;THAN 20       
  LDX SCNPNT      ;THEN, NOTCHANGE SCNPNT       
  BNE OUTC_R               
  RTS                
OUTC_R=*                
  CMP #$08      ;IF IS BA',SCNPNT DECREASED BY 1    
  BNE OUTCH_               
  DEC SCNPNT               
  RTS                
OUTCH_=*                
  CMP #$0A   ;IF IS LF',SCNPNT SHOULD BE SET       
       ;TO ZERO          
  BNE OUTC__               
  LDA #$00               
  STA SCNPNT               
OUTC__=*                
  RTS                
CSLOU_=*                
  JSR C_LIN   ;DISTINGUISH CTRL & NO-CTRL CHAR        
  BCS CSLOUT   ;EXCEPT CR','LF','BA','TAB'           
  PHA                
  LDA #$5E   ;IF CTRL CHAR, OUTPUT ~', FOLLOWED       
       ;BY A CHAR CORRES, THIS DESIRED      
       ;CONTROL CHARACTER          
  JSR OUTCHR               
  PLA                
  ORA #$40               
 ;                 
 ;*******************************************************                 
 ;*                 
 ;* FUNCTION 2 : CONSOLE OUTPUT *           
 ;*                 
 ;********************************************************                 
 ;*                 
 ;* ENTRY PARAMETERS :              
 ;*  REGISTER X : 2            
 ;*  REGISTER A : ASCII CHARACTER           
 ;*                 
 ;*******************************************************                 
 ;                 
CSLOUT=*                
 ;                 
  CMP #$09    ;CHECK FOR TAB'         
  BEQ C_LOUT               
  JMP OUTCHR               
C_LOUT=*                
  LDA #$20    ;IF IS TAB',OUTPUT SOME SPACE TO      
  JSR OUTCHR    ;FIT THE NEEDS OF THE TAB'      
  LDA SCNPNT               
  AND #$07               
  BNE C_LOUT               
  RTS                
RESV*=*+1                
 ;                 
 ;                 
 ;                 
 ;                 
 ;                 
 ;                 
 ;                 
 ;*****************************************************                 
 ;*                 
 ;*  FUNCTION 3 : LIST OUTPUT           
 ;*                 
 ;******************************************************                 
 ;*                 
 ;* ENTRY PARAMETERS :              
 ;*  REGISTER X : 3            
 ;******************************************************                 
 ;                 
LITOTT=*                
 ;                 
  JMP LITOUT               
 ;                 
 ;*******************************************************                 
 ;*                 
 ;*  FUNCTION 4 : DIRECT CONSOLE I/0          
 ;*                 
 ;********************************************************                 
 ;*                 
 ;* ENTRY PARAMETERS :              
 ;*  REGISTER X : 4            
 ;*  REGISTER A : $FF (INPUT) OR CHAR(OUTPUT)         
 ;*                 
 ;* RETURNED VALUE :              
 ;*  REGISTER A : CHARACTER OR STATUS          
 ;*                 
 ;*******************************************************                 
 ;                 
DRCSIO=*                
 ;                 
  TAX                
  INX       ;CHECK FOR INPUT OR OUTPUT     
  BEQ D_CSIO               
  JMP CLOUTT     ;OUTPUT THIS CHARACTER        
D_CSIO=*                
  JSR CSLTET     ;TEST IF CONSOLE IS READY INPUT     
  AND #$01               
  BEQ DR_SIO     ;IF NOT READY,RETURN        
  JSR CLINN     ;INPUT A CHARACTER        
DR_SIO=*                
  JMP STRTFG               
REESV*=*+3                
 ;                 
 ;                 
 ;                 
 ;                 
 ;                 
 ;                 
 ;                 
 ;                 
 ;                 
 ;                 
 ;                 
 ;********************************************************                 
 ;*                 
 ;* FUNCTION 5 : BUFFER OUTPUT            
 ;*                 
 ;********************************************************                 
 ;*                 
 ;* ENTRY PARAMETERS :              
 ;*  REGISTER X : 5            
 ;*  REGISTER Y,A : STARTING ADDRESS OF THE BUFFER        
 ;*                 
 ;******************************************************                 
 ;                 
OUTBUF=*                
 ;                 
  LDY #$00               
OU_BUF=*                
  LDA (DEREG),Y               
  CMP #$24      ;'$'?         
  BNE O_TBUF      ;IF IS,END        
  RTS                
O_TBUF=*                
  JSR CSLOUT      ;IF NOT,OUTPUT THIS CHARACTER UNTIL     
          ;$ IS MET.      
  INY                
  BNE OU_BUF               
  INC DEREG+1               
  BNE OU_BUF               
 ;                 
BKSPAC=*      ;BACK SPACE ONE CHARACTER       
 ;                 
  JSR B_SPAC               
  LDA #$20               
  JSR CLOUTT               
B_SPAC=*                
  LDA #$08               
  JMP CLOUTT               
 ;                 
NWLNHD=*      ;POSITION CURSOR TO THE LOCA. OF NEW    
          ;LINE CORRESPONDING TO THE ORIGINAL    
          ;POSITION IN CURRENT LINE     
  LDA #$23      ;OUTPUT # TO ENDED CURRENT LINE    
  JSR OUTCHR               
  JSR CRLFHD      ;CURSOR TO A NEW LINE     
NW_NHD=*                
  LDA SCNPNT      ;POSITION CURSOR TO THE LOCA.     
          ;CORRESPONDING THE ORIGINAL ONE     
  CMP SCNPTS               
  BCC N_LNHD               
  RTS                
N_LNHD=*                
  LDA #$20               
  JSR OUTCHR               
  JMP NW_NHD               
 ;                 
CRLFHD=*    ;CR AND LF HANDLING         
 ;                 
  LDA #$0D               
  JSR OUTCHR               
  LDA #$0A               
  JMP OUTCHR               
 ;                 
 ;*******************************************************                 
 ;*                 
 ;* FUNCTION 6 : READ CONSOLE BUFFER           
 ;*                 
 ;*******************************************************                 
 ;*                 
 ;* ENTRY PARAMETERS ;              
 ;*   REGISTER X ; 6           
 ;*   REGISTER Y,A: STARTING ADDRESS OF THIS BUFFER *       
 ;*                 
 ;* RETURNED VALUE :              
 ;*   CONSOLE CHARACTERS IN THE BUFFER          
 ;*                 
 ;*******************************************************                 
 ;                 
RDCSBF=*                
 ;                 
  CLD                
  LDA SCNPNT     ;STORE THE INIT VALUE OF SCREEN     
         ;LINE POINTER TO SCREEN STAR POINTER    
  STA SCNPTS               
  LDA #$00               
  LDY #$01               
  STA CHRNUB     ;KEEP COUNTER OF CURRENT CHAR.S      
  STY CSBUFS     ;AND OFFSET OF THE LAST CHAR TO START   
         ;ADDRESS OFTHEBUFFER.        
RD_SBF=*                
  JSR INCHR     ;GET A CHARACTER        
  AND #$7F               
  CMP #$0D     ;'CR'?          
  BEQ RD___F               
  CMP #$0A     ;'LF'?          
  BNE RDC___               
RD___F=*                
  JMP RDC__F               
RDC___=*                
  CMP #$08     ;'BA`?          
  BNE RDC_BF               
  LDA CHRNUB     ;'BA' HANDLING         
  BEQ RD_SBF               
  DEC CHRNUB     ;COUNTER DECREASE BY 1       
  LDA SCNPNT     ;STORE SCREEN LINE POINTER       
  STA BANBAC     ;TO BACK SPACE NUMBER ACCOUNTER      
  JMP RD__BF               
RDC_BF=*                
  NOP                
  CMP #$7F     ;'DEL'?          
                  
                  
                  
                  
                  
  BNE RDCS_F               
  LDX CHRNUB               
  BEQ RD_SBF               
  DEC CHRNUB     ;NUMBER ACCOUNTER AND BUFFER       
  DEC CSBUFS     ;OFFSET DECREASE BY 1 TO ELIMMINATE     
         ;THE LAST WORD       
  JMP RD_SB_               
RDCS_F=*                
  CMP #$05     ;CONTROL-E?          
  BNE RDCSB_               
  JSR CRLFHD     ;GIVING A CR','LF'COMMAND        
  LDA #$00     ;SET SCREEN START POINTER TO ZERO     
  STA SCNPTS               
  JMP RD_SBF     ;GET NEXT CHARACTER        
RDCSB_=*                
  CMP #$10     ;CONTROL-P?          
  BNE R__SBF               
  LDA #$80     ;REVERSE THE PRINTER FLAG       
  EOR PRTFLG               
  STA PRTFLG               
  JMP RD_SBF     ;GET NEXT CHARACTER        
R__SBF=*                
  CMP #$18     ;'CONTROL-X ?         
  BNE R_C_BF               
RDCSB1=*                
  LDA SCNPTS     ;KEEP BACKING SPACE UNTIL THE START     
         ;POSITION OF CURRENT LINE ARRIVED     
  CMP SCNPNT               
  BCS RDCSBF               
  DEC SCNPNT               
  JSR BKSPAC               
  JMP RDCSB1               
R_C_BF=*                
  CMP #$15     ;'CONTROL U'?         
  BNE R_CS_F               
  JSR NWLNHD     ;CREATE A NEW LINE       
  JMP RDCSBF               
R_CS_F=*                
  CMP #$12     ;'CONTROL-R'?          
  BNE R_CSB_               
RD__BF=*                
  JSR NWLNHD     ;NEW LINE HANDLING        
  LDY #$01     ;START TO WRITE A NEW LINE FROM THE   
         ;FIRST CHARCACTER OF CURRENT LINE IN    
         ;CONSOLE BUFFER        
  STY CSBUFS               
  LDA CHRNUB               
  STA TEMP               
RDCSB2=*                
  BEQ RD_S_F               
  INC CSBUFS     ;INCRE. OFFSET TO WRITE NEXT CHAR     
  LDY CSBUFS               
  LDA (DEREG),Y               
  JSR CSLOU_     ;WRITE NEXT CHARACTER        
  DEC TEMP               
  JMP RDCSB2               
RD_S_F=*                
  LDA BANBAC   ;IF AL CHAR HAVE RETYPED,CHECK FOR       
  BNE RDCSB5               
  JMP RD_SBF   ;IF BANBAC=0           
RDCSB5=*                
  SEC                
  SBC SCNPNT   ;TO FIND THE DIFFERENCE NO. BETWEEN       
       ;CURRENT ACCOUNTER AND PREVIOUS        
       ;ACCOUNTER           
  STA BANBAC               
RDCSB3=*                
  JSR BKSPAC   ;BACK SPACE UNTIL CURRENT ACCOUNTER        
  DEC BANBAC   ;MATCHING PREVIOUS ONE          
  BNE RDCSB3               
  JMP RD_SBF               
R_CSB_=*                
  INC CSBUFS   ;SET UFFSET TO CURRENT CHAR.        
  LDY CSBUFS               
  STA (DEREG),Y  ;STORE THE CHAR INTO CORRESPONDING         
       ;LOCATIONN           
  INC CHRNUB   ;INCREASING CHR NUMBER 1         
RD_SB_=*                
  PHA                
  JSR CSLOU_   ;TYPE IT           
  PLA                
  CMP #$03   ;CHECK FOR CONTROL-C          
  BNE RDCSB4               
  LDA CHRNUB               
  CMP #$01               
  BNE RDCSB4               
  JMP $0000   ;IF IS CTRL-C AND IN STARTING       
       ;POSITION,GO TO WARM BOOT        
RDCSB4=*                
  NOP                
  NOP                
  LDY #$00   ;TO COMPARE CHAR NO. WITH MAX NO.      
  LDA (DEREG),Y               
  CMP CHRNUB               
  BEQ RDC__F               
  JMP RD_SBF   ;IF LESS THAN,GET NEXT CHAR.        
RDC__F=*                
  LDY #$01   ;STORE CHR NO. TO CONSOLE BUFFER       
       ;WHEN RETURN          
  LDA CHRNUB               
  STA (DEREG),Y               
  JMP CRLFHD               
 ;                 
 ;                 
 ;                 
 ;                 
 ;                 
 ;                 
 ;*******************************************************                 
 ;*                 
 ;* FUNCTION 7 : GET INPUT/OUTPUT BYTE           
 ;*                 
 ;*******************************************************                 
 ;*                 
 ;* ENTRY PARAMETERS :              
 ;*   REGISTER X : 7           
 ;*                 
 ;*  RETURNED VALUE :             
 ;*   REGISTER A : INPUT/OUTPUT BYTE VALUE         
 ;*                 
 ;*******************************************************                 
 ;                 
GTIOBY=*                
 ;                 
  LDA IOBYTE               
  JMP STRTFG               
 ;                 
 ;*******************************************************                 
 ;*                 
 ;*  FUNCTION 8 : SET INPUT/OUTPUT BYTE          
 ;*                 
 ;******************************************************* *                
 ;*                 
 ;*  ENTRY PARAMETERS :             
 ;*   REGISTER X : 8           
 ;*   REGISTER A : INPUT/OUTPUT BYTE VALUE         
 ;*                 
 ;*******************************************************                 
 ;                 
STIOBY=*                
 ;                 
  STA IOBYTE               
  RTS                
 ;                 
 ;******************************************************* *                
 ;*                 
 ;*  FUNCTION 9 : GET CONSOLE STATUS *         
 ;*                 
 ;******************************************************* *                
 ;*                 
 ;* ENTRY PARAMETERS :              
 ;*  REGISTER X : 9            
 ;*                 
 ;* RETURNED VALUE :              
 ;*  REGISTER A : CONSOLE STATUS           
 ;*                 
 ;*******************************************************                 
 ;                 
GTCLST=*                
 ;                 
  JSR INTPHD              
  JMP STRTFG               
 .END                 
                 
